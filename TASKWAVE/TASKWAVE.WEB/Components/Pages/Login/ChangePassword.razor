@page "/TrocarSenha/t={Token}"
@inject HttpClient Http
@rendermode InteractiveServer
@layout EmptyLayout

<div class="d-flex justify-content-center w-100">
    <div class="row login_card">
        <div class="login_card_form">
            <div class="mt-5 mb-4 mx-lg-5">
                <h2 class="w-75 text-white">
                    Redefina sua senha
                </h2>
            </div>
            <div class="mx-lg-5">
                <EditForm Model="@model" FormName="TrocarSenhaForm" OnValidSubmit="HandleValidSubmit">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="form-group w-100">
                        <label class="text-white fs-5" for="senha">Nova Senha</label>
                        <InputText id="senha" type="password"class="text-white form-control shadow-none bg-transparent border-0 border-bottom rounded-0" @bind-Value="model.NovaSenha" />
                    </div>

                    <div class="form-group w-100 mt-3">
                        <label class="text-white fs-5" for="confirm">Confirmar Senha</label>
                        <InputText id="confirm" type="password" class="text-white form-control shadow-none bg-transparent border-0 border-bottom rounded-0" @bind-Value="model.ConfirmarSenha" />
                    </div>

                    @if (!string.IsNullOrEmpty(MensagemErro))
                    {
                        <div class="text-danger mt-3">@MensagemErro</div>
                    }

                    <div class="d-flex align-items-center flex-column mt-xl-5">
                        <button type="submit" class="btn btn-primary rounded-3 w-50 rounded-pill fs-4">Alterar senha</button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public string Token { get; set; }

    private TrocaSenhaDTO model = new();
    private string MensagemErro;

    protected override void OnInitialized()
    {
        model.Token = Token;
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            var response = await Http.PutAsJsonAsync("api/RedefinicaoSenha/Trocar", model);
            if (response.IsSuccessStatusCode)
            {
                // Redireciona ou mostra mensagem de sucesso
                MensagemErro = string.Empty;
                NavigationManager.NavigateTo("/");
            }
            else
            {
                var erro = await response.Content.ReadAsStringAsync();
                MensagemErro = erro;
            }
        }
        catch (Exception ex)
        {
            MensagemErro = "Erro ao redefinir senha: " + ex.Message;
        }
    }

    [Inject]
    private NavigationManager NavigationManager { get; set; }
}

<style>

    body {
        background-color: #333339;
        font-family: Verdana;
    }

    .login_card {
        width: 75%;
        margin-top: 55px;
        background-color: #748CAB;
        border-radius: 20px;
        min-height: 65vh;
        max-width: 650px;
    }

    .login_card_form {
        background-color: #3E5C76;
        border-radius: 20px;
    }
</style>