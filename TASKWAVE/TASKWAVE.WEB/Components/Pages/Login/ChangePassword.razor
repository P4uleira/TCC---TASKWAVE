@page "/TrocarSenha/t={EncryptedUserId}"
@rendermode InteractiveServer
@inject HttpClient Http
@layout EmptyLayout

<div class="d-flex justify-content-center w-100">
	<div class="row login_card">
		<div class="login_card_form">
			<div class="mt-5 mb-4 mx-lg-5">
				<h2 class="w-75 text-white">Recupere sua conta TaskWave</h2>
			</div>
			<div class="mt-3 mb-4 mx-lg-5">
				<h5 class="w-75 text-white">@usuario.EmailUsuario</h5>
			</div>
			<div class="mx-lg-5">
				<EditForm Model="@usuario" OnValidSubmit="HandleValidSubmit">
					<DataAnnotationsValidator />
					<div class="form-group w-100">
						<label class="text-white fs-5" for="senha">Senha</label>
						<InputText id="senha" type="password" class="text-white form-control shadow-none bg-transparent border-0 border-bottom rounded-0 valid" @bind-Value="usuario.SenhaUsuario" />
						<ValidationMessage For="@(() => usuario.SenhaUsuario)" class="text-white" />
					</div>
					<div class="form-group w-100">
						<label class="text-white fs-5" for="Confirm_senha">Confirmar senha</label>
						<InputText id="Confirm_senha" type="password" class="text-white form-control shadow-none bg-transparent border-0 border-bottom rounded-0 valid" @bind-Value="ConfirmarSenha" />
						@if (!string.IsNullOrEmpty(msgError))
						{
							<p class="text-danger">@msgError</p>
						}
					</div>
				</EditForm>
			</div>
		</div>
	</div>
</div>

@code {
	[Parameter]
	public string EncryptedUserId { get; set; }

	private Usuario usuario = new();
	private string ConfirmarSenha = string.Empty;
	private string msgError = string.Empty;
	private string idUser = string.Empty;

	protected override async Task OnInitializedAsync()
	{
		idUser = CryptoHelper.DecryptFromUrlSafe(EncryptedUserId);
		if (!string.IsNullOrEmpty(idUser))
		{
			var usuarioExistente = await Http.GetFromJsonAsync<Usuario>($"api/Usuario/{idUser}");
			if (usuarioExistente != null)
			{
				usuario.EmailUsuario = usuarioExistente.EmailUsuario;
			}
		}
		else
		{
			Console.WriteLine("ID de usuário inválido.");
		}
	}

	protected async Task HandleValidSubmit()
	{
		if (usuario.SenhaUsuario != ConfirmarSenha)
		{
			msgError = "As senhas não coincidem!";
			return;
		}

		var usuarioExistente = await Http.GetFromJsonAsync<Usuario>($"api/Usuario/{idUser}");
		if (usuarioExistente != null)
		{
			usuarioExistente.SenhaUsuario = usuario.SenhaUsuario;
			var response = await Http.PutAsJsonAsync($"api/Usuario/{idUser}", usuarioExistente);
			if (response.IsSuccessStatusCode)
			{
				Console.WriteLine("Senha atualizada com sucesso.");
				// Redirecionar ou mostrar mensagem para o usuário
			}
			else
			{
				Console.WriteLine("Erro ao atualizar a senha.");
			}
		}
	}
}
