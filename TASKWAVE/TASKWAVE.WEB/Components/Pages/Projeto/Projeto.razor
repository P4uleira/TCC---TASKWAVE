@page "/Projeto"
@rendermode InteractiveServer
@using TASKWAVE.WEB.Components.Layout
@layout NavMenu
@inject HttpClient Http

<div class="sidebar">
	<NavMenuOptions Options="@Options" />
</div>

<div class="m-md-5">
	<h2>Minhas Projetos</h2>
	<h4 class="mt-3">Gerenciar Projetos</h4>		

	@foreach (var project in projectList)
	{
		var teamName = teamListInUse.FirstOrDefault(e => e.teamId == project.teamId)?.teamName ?? "Equipe não encontrado";
		<div class="mb-3">
			<label>@project.projectName</label>
			<label>@project.projectDescription</label>
			<label>@project.projectCreationDate</label>
			<label>@teamName</label>
			<button class="btn btn-sm btn-primary" @onclick="() => OpenEditModal(project)">Editar</button>
		</div>
	}
</div>

@if (selectedProject != null)
{
	<div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
		<div class="modal-dialog">
			<div class="modal-content text-black">
				<div class="modal-header">
					<h5 class="modal-title">Editar Equipe</h5>
					<button type="button" class="btn-close" @onclick="CloseModal"></button>
				</div>
				<div class="modal-body">
					<EditForm Model="@selectedProject" OnValidSubmit="UpdateProject">
						<DataAnnotationsValidator />
						<ValidationSummary />

						<div class="mb-3">
							<label>Nome</label>
							<InputText class="form-control" @bind-Value="selectedProject.projectName" />
						</div>

						<div class="mb-3">
							<label>Descrição</label>
							<InputText class="form-control" @bind-Value="selectedProject.projectDescription" />
						</div>

						<div class="mb-3">
							<label>Descrição</label>
							<InputDate class="form-control" @bind-Value="selectedProject.projectCreationDate" />
						</div>

						<div class="mb-3">
							<label>Equipe</label>
							<InputSelect class="form-select" @bind-Value="selectedProject.teamId">
								@foreach (var team in teamListInUse)
								{
									<option value="@team.teamId">@team.teamName</option>
								}
							</InputSelect>
						</div>

						<button type="button" class="btn btn-success" @onclick="() => DeleteProject(selectedProject.projectId)">Excluir Projeto</button>
						<button type="submit" class="btn btn-success">Salvar</button>
						<button type="button" class="btn btn-secondary ms-2" @onclick="CloseModal">Cancelar</button>
					</EditForm>
				</div>
			</div>
		</div>
	</div>
}

@code {

	List<HyperLink> Options = new List<HyperLink>
	{
		new HyperLink("/ProjetoCreate", "Criar Projeto", "Criar Projeto", HyperLink.TypeOfIcon.Add),
		new HyperLink("/Projeto", "Gerenciar Projetos", "Gerenciar Projetos", HyperLink.TypeOfIcon.List)
	};

	private List<EquipeResponse> teamListInUse = new();
	private List<ProjetoResponse> projectList = new();
	private string mensageResponse;
	private ProjetoRequest selectedProject;

	protected override async Task OnInitializedAsync()
	{
		await GetAllTeams();
		await GetAllProjects();
	}

	#region CRUD
	private async Task GetAllTeams()
	{
		try
		{
			teamListInUse = await Http.GetFromJsonAsync<List<EquipeResponse>>("api/Equipe");
		}
		catch (Exception ex)
		{
			mensageResponse = $"Erro ao carregar Equipees: {ex.Message}";
		}
	}

	private async Task GetAllProjects()
	{
		try
		{
			projectList = await Http.GetFromJsonAsync<List<ProjetoResponse>>("api/Projeto");
		}
		catch (Exception ex)
		{
			mensageResponse = $"Erro ao carregar Projetos: {ex.Message}";
		}
	}


	private async Task DeleteProject(int projectId)
	{
		try
		{
			var response = await Http.DeleteAsync($"api/Projeto/{projectId}");

			if (response.IsSuccessStatusCode)
			{
				await GetAllProjects();
				CloseModal();
			}
			else
			{
				mensageResponse = "Erro ao excluir Projeto.";
			}
		}
		catch (Exception ex)
		{
			mensageResponse = $"Erro: {ex.Message}";
		}
	}

	private async Task UpdateProject()
	{
		try
		{
			var response = await Http.PutAsJsonAsync($"api/Projeto/{selectedProject.projectId}", selectedProject);
			if (response.IsSuccessStatusCode)
			{
				await GetAllProjects();
				await GetAllTeams();

				CloseModal();
			}
			else
			{
				mensageResponse = "Erro ao atualizar Projeto.";
			}
		}
		catch (Exception ex)
		{
			mensageResponse = $"Erro: {ex.Message}";
		}
	}
	#endregion


	#region Modal
	private void OpenEditModal(ProjetoResponse project)
	{
		selectedProject = new ProjetoRequest
		{
			projectId = project.projectId,
			projectName = project.projectName,
			projectDescription = project.projectDescription,
			projectCreationDate = project.projectCreationDate,
			teamId = project.teamId
		};
	}

	private void CloseModal()
	{
		selectedProject = null;
	}
	#endregion
}
