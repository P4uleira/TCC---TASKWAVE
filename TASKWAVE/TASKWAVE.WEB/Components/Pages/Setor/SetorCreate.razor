@page "/SetorCreate"
@rendermode InteractiveServer
@inject HttpClient Http

<PageTitle>Criar Setor</PageTitle>

<div class="flex h-screen bg-gray-900 text-white">
    <!-- Sidebar -->
    <aside class="w-64 bg-gray-800 p-6 space-y-4">
        <div class="text-xl font-semibold">+ Criar Setor</div>
        <div class="text-gray-400 hover:text-white cursor-pointer flex items-center space-x-2">
            <span>✏️</span>
            <span>Gerenciar Setores</span>
        </div>
    </aside>

    <!-- Main Content -->
    <main class="flex-1 p-10 overflow-y-auto">
        <h1 class="text-3xl font-bold mb-8">Meus Setores</h1>

        <section class="bg-gray-800 p-8 rounded-lg shadow-md max-w-xl mx-auto">
            <h2 class="text-2xl font-semibold mb-6">Criar Setor</h2>

            <EditForm Model="@sectorToCreate" OnValidSubmit="HandleValidSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary class="text-red-400 mb-4" />

                <div class="mb-4">
                    <label class="block mb-2 text-sm font-medium">Nome do setor</label>
                    <InputText class="w-full p-2 bg-gray-700 border border-gray-600 rounded text-black"
                               @bind-Value="sectorToCreate.sectorName" placeholder="Insira o nome do Setor" />
                </div>

                <div class="mb-4">
                    <label class="block mb-2 text-sm font-medium">Descrição do setor</label>
                    <InputTextArea class="w-full p-2 bg-gray-700 border border-gray-600 rounded text-black"
                                   @bind-Value="sectorToCreate.sectorDescription" placeholder="Insira a descrição do setor" />
                </div>

                <div class="mb-6">
                    <label class="block mb-2 text-sm font-medium">Ambiente do Setor</label>
                    <InputSelect class="w-full p-2 bg-gray-700 border border-gray-600 rounded text-black"
                                 @bind-Value="sectorToCreate.environmentId">
                        <option value="">Selecione o ambiente que o setor pertence</option>
                            @foreach (var ambiente in environmentList)
                            {
                            <option value="@ambiente.environmentID">@ambiente.environmentName</option>
                            }
                    </InputSelect>
                </div>

                <button type="submit" class="bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded w-full">
                    Criar Setor
                </button>
            </EditForm>

            @if (!string.IsNullOrEmpty(mensageResponse))
            {
                <div class="mt-4 text-green-400">@mensageResponse</div>
            }
        </section>
    </main>
</div>

@code {
    private List<AmbienteResponse> environmentList = new();
    private SetorRequest sectorToCreate = new();
    private string mensageResponse;

    protected override async Task OnInitializedAsync()
    {
        await GetEnviromentAll();
    }

    private async Task GetEnviromentAll()
    {
        try
        {
            environmentList = await Http.GetFromJsonAsync<List<AmbienteResponse>>("api/Ambiente");
        }
        catch (Exception ex)
        {
            mensageResponse = $"Erro ao carregar ambientes: {ex.Message}";
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            var response = await Http.PostAsJsonAsync("api/Setor", sectorToCreate);

            if (response.IsSuccessStatusCode)
            {
                mensageResponse = "Setor criado com sucesso.";
                sectorToCreate = new();
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                mensageResponse = $"Erro: {error}";
            }
        }
        catch (Exception ex)
        {
            mensageResponse = $"Erro na requisição: {ex.Message}";
        }
    }
}

<style>
    /* Container flex full height e fundo escuro */
    .flex {
        display: flex;
        height: 100vh;
        background-color: #1f2937; /* gray-900 */
        color: white;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }

    /* Sidebar */
    aside {
        width: 16rem; /* 64 */
        background-color: #2d3748; /* gray-800 */
        padding: 1.5rem; /* p-6 */
        display: flex;
        flex-direction: column;
        gap: 1rem; /* space-y-4 */
    }

        aside > div:first-child {
            font-size: 1.25rem; /* text-xl */
            font-weight: 600; /* font-semibold */
        }

        aside > div:nth-child(2) {
            color: #9ca3af; /* text-gray-400 */
            cursor: pointer;
            display: flex;
            align-items: center;
            gap: 0.5rem; /* space-x-2 */
        }

            aside > div:nth-child(2):hover {
                color: white;
            }

    /* Main content */
    main {
        flex-grow: 1; /* flex-1 */
        padding: 2.5rem; /* p-10 */
        overflow-y: auto;
    }

    h1 {
        font-size: 1.875rem; /* text-3xl */
        font-weight: 700; /* font-bold */
        margin-bottom: 2rem; /* mb-8 */
    }

    /* Section form container */
    section {
        background-color: #2d3748; /* bg-gray-800 */
        padding: 2rem; /* p-8 */
        border-radius: 0.5rem; /* rounded-lg */
        box-shadow: 0 4px 6px rgba(0,0,0,0.3); /* shadow-md */
        max-width: 36rem; /* max-w-xl */
        margin-left: auto;
        margin-right: auto;
    }

        section h2 {
            font-size: 1.5rem; /* text-2xl */
            font-weight: 600; /* font-semibold */
            margin-bottom: 1.5rem; /* mb-6 */
        }

    /* Form spacing */
    .mb-2 {
        margin-bottom: 0.5rem;
    }

    .mb-4 {
        margin-bottom: 1rem;
    }

    .mb-6 {
        margin-bottom: 1.5rem;
    }

    /* Labels */
    label {
        display: block;
        font-size: 0.875rem; /* text-sm */
        font-weight: 500; /* font-medium */
        margin-bottom: 0.5rem;
    }

    /* Inputs and textarea */
    input[type="text"],
    textarea,
    select {
        width: 100%;
        padding: 0.5rem 0.75rem; /* p-2 */
        background-color: #374151; /* bg-gray-700 */
        border: 1px solid #4b5563; /* border-gray-600 */
        border-radius: 0.375rem; /* rounded */
        color: white;
        font-size: 1rem;
    }

        input[type="text"]::placeholder,
        textarea::placeholder {
            color: #9ca3af; /* texto placeholder claro */
        }

    /* Button */
    button[type="submit"] {
        background-color: #2563eb; /* bg-blue-600 */
        color: white;
        font-weight: 700;
        padding: 0.5rem 1rem; /* py-2 px-4 */
        border-radius: 0.375rem; /* rounded */
        width: 100%;
        cursor: pointer;
        border: none;
        transition: background-color 0.2s ease-in-out;
    }

        button[type="submit"]:hover {
            background-color: #1d4ed8; /* bg-blue-700 */
        }

    /* Validation summary */
    .validation-summary {
        color: #f87171; /* text-red-400 */
        margin-bottom: 1rem;
    }

    /* Mensagem de sucesso */
    .text-green-400 {
        color: #4ade80;
        margin-top: 1rem;
    }
</style>