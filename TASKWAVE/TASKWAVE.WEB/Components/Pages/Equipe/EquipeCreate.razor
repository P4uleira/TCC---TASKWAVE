@page "/EquipeCreate"
@rendermode InteractiveServer
@using TASKWAVE.WEB.Components.Layout
@layout NavMenu
@inject HttpClient Http

<PageTitle>Criar Equipe</PageTitle>

<main>
    <div class="container-flex">

        <div class="linha-vertical"></div>


        <section class="right-content">

            <EditForm Model="@teamToCreate" OnValidSubmit="HandleValidSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary class="text-warning"/>

                <div class="form-group mb-3">
                    <label>Nome da equipe</label>
                    <InputText class="form-control" @bind-Value="teamToCreate.teamName" placeholder="Insira o nome da Equipe" />
                </div>

                <div class="form-group mb-3">
                    <label>Descrição da equipe</label>
                    <InputTextArea class="form-control" @bind-Value="teamToCreate.teamDescription" placeholder="Insira a descrição da equipe" />
                </div>

                <div class="form-group mb-4">
                    <label>Setor da Equipe</label>
                    <InputSelect class="form-control" @bind-Value="teamToCreate.sectorId">
                        <option value="">Selecione o setor que a equipe pertence</option>
                        @foreach (var sector in sectorList)
                        {
                            <option value="@sector.sectorId">@sector.sectorDescription</option>
                        }
                    </InputSelect>
                </div>

                <button type="submit" class="btn btn-primary w-25">
                    Criar Equipe
                </button>
            </EditForm>

            @if (!string.IsNullOrEmpty(mensageResponse))
            {
                <div class="mt-3 alert alert-info">@mensageResponse</div>
            }
        </section>
    </div>
</main>


@code {
    private List<SetorResponse> sectorList = new();
    private EquipeRequest teamToCreate = new();
    private string mensageResponse;

    protected override async Task OnInitializedAsync()
    {
        await GetSectorsAll();
    }

    private async Task GetSectorsAll()
    {
        try
        {
            sectorList = await Http.GetFromJsonAsync<List<SetorResponse>>("api/Setor");
        }
        catch (Exception ex)
        {
            mensageResponse = $"Erro ao carregar setores: {ex.Message}";
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            var response = await Http.PostAsJsonAsync("api/Equipe", teamToCreate);

            if (response.IsSuccessStatusCode)
            {
                mensageResponse = "Equipe criada com sucesso.";
                teamToCreate = new();
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                mensageResponse = $"Erro: {error}";
            }
        }
        catch (Exception ex)
        {
            mensageResponse = $"Erro na requisição: {ex.Message}";
        }
    }
}

<style>

    .container-flex {
        display: flex;
        height: 100vh;
        background-color: #333339;
        position: relative;
    }

    .linha-vertical {
        width: 1px;
        height: 100vh;
        background-color: #ccc;
        position: absolute;
        left: 250px;
        top: 0;
    }

    .right-content {
        margin-left: 250px;
        flex: 1;
        display: flex;
        flex-direction: column;
        padding: 2rem;
        background-color: #333339;
        color: white;
    }

    .form-control {
        background-color: #333339;
        color: #fff;
        border: 1px solid #555;
        width: 545px;
    }

        .form-control::placeholder {
            color: #aaa;
        }

    .btn-primary {
        background-color: #1fb6ff;
        border: none;
    }

        .btn-primary:hover {
            background-color: #0d8ddc;
        }
</style>