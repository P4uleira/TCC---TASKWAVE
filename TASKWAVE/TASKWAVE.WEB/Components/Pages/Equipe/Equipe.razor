@page "/Equipe"
@rendermode InteractiveServer
@using TASKWAVE.WEB.Components.Layout
@layout NavMenu
@inject HttpClient Http

<div class="sidebar">
	<NavMenuOptions Options="@Options" />
</div>

<div class="m-md-5">
	<h2>Minhas Equipes</h2>
	<h4 class="mt-3">Gerenciar Equipes</h4>		

	@foreach (var team in teamList)
	{
		var sectorName = sectorListInUse.FirstOrDefault(s => s.sectorId == team.sectorId)?.sectorName ?? "Setor não encontrado";
		<div class="mb-3">
			<label>@team.teamName</label>
			<label>@team.teamDescription</label>
			<label>@sectorName</label>
			<button class="btn btn-sm btn-primary" @onclick="() => OpenEditModal(team)">Editar</button>
		</div>
	}
</div>

@if (selectedTeam != null)
{
	<div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
		<div class="modal-dialog">
			<div class="modal-content text-black">
				<div class="modal-header">
					<h5 class="modal-title">Editar Setor</h5>
					<button type="button" class="btn-close" @onclick="CloseModal"></button>
				</div>
				<div class="modal-body">
					<EditForm Model="@selectedTeam" OnValidSubmit="UpdateTeam">
						<DataAnnotationsValidator />
						<ValidationSummary />

						<div class="mb-3">
							<label>Nome</label>
							<InputText class="form-control" @bind-Value="selectedTeam.teamName" />
						</div>

						<div class="mb-3">
							<label>Descrição</label>
							<InputText class="form-control" @bind-Value="selectedTeam.teamDescription" />
						</div>

						<div class="mb-3">
							<label>Setor</label>
							<InputSelect class="form-select" @bind-Value="selectedTeam.sectorId">
								@foreach (var sector in sectorListInUse)
								{
									<option value="@sector.sectorId">@sector.sectorName</option>
								}
							</InputSelect>
						</div>

						<button type="button" class="btn btn-success" @onclick="() => DeleteTeam(selectedTeam.teamId)">Excluir Setor</button>
						<button type="submit" class="btn btn-success">Salvar</button>
						<button type="button" class="btn btn-secondary ms-2" @onclick="CloseModal">Cancelar</button>
					</EditForm>
				</div>
			</div>
		</div>
	</div>
}

@code {

	List<HyperLink> Options = new List<HyperLink>
	{
		new HyperLink("/EquipeCreate", "Criar Equipe", "Criar Equipe", HyperLink.TypeOfIcon.Add),
		new HyperLink("/Equipe", "Gerenciar Equipes", "Gerenciar Equipes", HyperLink.TypeOfIcon.List)
	};

	private List<SetorResponse> sectorListInUse = new();
	private List<EquipeResponse> teamList = new();
	private string mensageResponse;
	private EquipeRequest selectedTeam;

	protected override async Task OnInitializedAsync()
	{
		await GetAllSectors();
		await GetAllTeams();
	}

	#region CRUD
	private async Task GetAllSectors()
	{
		try
		{
			sectorListInUse = await Http.GetFromJsonAsync<List<SetorResponse>>("api/Setor");
		}
		catch (Exception ex)
		{
			mensageResponse = $"Erro ao carregar setores: {ex.Message}";
		}
	}

	private async Task GetAllTeams()
	{
		try
		{
			teamList = await Http.GetFromJsonAsync<List<EquipeResponse>>("api/Equipe");
		}
		catch (Exception ex)
		{
			mensageResponse = $"Erro ao carregar Equipes: {ex.Message}";
		}
	}

	
	private async Task DeleteTeam(int teamId)
	{
		try
		{
			var response = await Http.DeleteAsync($"api/Equipe/{teamId}");

			if (response.IsSuccessStatusCode)
			{
				await GetAllTeams();
				CloseModal();
			}
			else
			{
				mensageResponse = "Erro ao excluir equipe.";
			}
		}
		catch (Exception ex)
		{
			mensageResponse = $"Erro: {ex.Message}";
		}
	}
	
	private async Task UpdateTeam()
	{
		try
		{
			var response = await Http.PutAsJsonAsync($"api/Equipe/{selectedTeam.teamId}", selectedTeam);
			if (response.IsSuccessStatusCode)
			{
				await GetAllTeams();
				CloseModal();
			}
			else
			{
				mensageResponse = "Erro ao atualizar equipe.";
			}
		}
		catch (Exception ex)
		{
			mensageResponse = $"Erro: {ex.Message}";
		}
	}
	#endregion


	#region Modal
	private void OpenEditModal(EquipeResponse team)
	{
		selectedTeam = new EquipeRequest
		{
			teamId = team.teamId,
			teamName = team.teamName,
			teamDescription = team.teamDescription,
			sectorId = team.sectorId
		};
	}

	private void CloseModal()
	{
		selectedTeam = null;
	}
	#endregion
}
